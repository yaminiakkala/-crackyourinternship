class Solution {
    public static void merging(int arr[],int si,int mid,int ei){
        int temp[]=new int[ei-si+1];
        int i=si; //staring index for left 
        int j=mid+1; //starting index for right
        int k=0 ;//for temp
        //merging left and right indexes
        while((i<=mid) && (j<=ei)){
            if(arr[i]<arr[j]){
                temp[k]=arr[i];
                k++;i++;
            }else{
                temp[k]=arr[j];
                k++;j++;
            }
        }
      //again running loop for elements which are remaining
        while(i<=mid){
            temp[k++]=arr[i++];   //left side
        }
        //again running loop for elements which are remaining
        while(j<=ei){
            temp[k++]=arr[j++];   //right  side
        }
        //loop for copying
        for(i=si,k=0;k<temp.length;i++,k++){
            arr[i]=temp[k];
        }

    }
    public static void mergeSort(int arr[],int si,int ei){
        //Base condition
        if(si >=ei){
           return;
        }
        //work
        int mid=si+(ei-si)/2 ;            // we can also write (si+ei)/2
        //for left 
        mergeSort(arr, si, mid);
        //for right
        mergeSort(arr, mid+1, ei);
        merging(arr,si,mid,ei);


    }
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int l=nums1.length;
        for(int i=m,j=0 ;i<l && j<n;i++,j++){
             nums1[i]=nums2[j];
        }
        mergeSort(nums1,0,l-1);
        for(int i=0;i<l;i++){
            System.out.print(nums1[i]);
        }
        
    }
}
